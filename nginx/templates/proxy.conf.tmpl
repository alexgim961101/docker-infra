{{ range $host, $containers := groupByMulti $ "Env.VIRTUAL_HOST" "," }}
{{ $host := trim $host }}
{{ $ssl_enabled := false }}
{{ range $container := $containers }}
{{ if eq (index $container.Env "VIRTUAL_HOST_SSL") "true" }}
{{ $ssl_enabled = true }}
{{ end }}
{{ end }}

# Upstream 서버 설정
{{ range $index, $container := $containers }}
upstream {{ $host }}_upstream_{{ $index }} {
    server 127.0.0.1:{{ index $container.Env "VIRTUAL_PORT" }};
}
{{ end }}

# WebSocket 연결을 위한 map 설정
map $http_upgrade $connection_upgrade {
    default upgrade;
    '' close;
}

server {
    listen 80;
    listen [::]:80;
    {{ if $ssl_enabled }}
    listen 443 ssl http2;
    listen [::]:443 ssl http2;
    {{ end }}
    server_name {{ $host }};
    root /var/www/html/sites/{{ $host }};

    {{ if $ssl_enabled }}
    ssl_certificate /etc/letsencrypt/live/{{ $host }}/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/{{ $host }}/privkey.pem;
    {{ end }}

    client_max_body_size 1024m;
    
    # 리다이렉트 설정
    {{ range $container := $containers }}
    {{ if index $container.Env "VIRTUAL_HOST_REDIRECT" }}
    location ^~ {{ index $container.Env "VIRTUAL_HOST_REDIRECT_PATH" | default "/" }} {
        return 301 {{ index $container.Env "VIRTUAL_HOST_REDIRECT" }}$request_uri;
    }
    {{ end }}
    {{ end }}

    access_log /var/log/nginx/{{ $host }}.access.log;
    error_log /var/log/nginx/{{ $host }}.error.log;
    gzip_static on;

    # Let's Encrypt 인증서 갱신을 위한 설정
    location ^~ /.well-known {
        allow all;
        alias /var/lib/letsencrypt/.well-known/;
        default_type "text/plain";
        try_files $uri =404;
    }

    # 각 컨테이너별 location 설정
    {{ range $index, $container := $containers }}
    {{ $location := index $container.Env "VIRTUAL_HOST_LOCATION" | default "/" }}
    location {{ $location }} {
        try_files $uri @proxy_{{ $index }};
        {{ if $ssl_enabled }}
        if ($scheme = http) {
            return 301 https://$host$request_uri;
        }
        {{ end }}
    }

    location @proxy_{{ $index }} {
        proxy_pass http://{{ $host }}_upstream_{{ $index }};
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection $connection_upgrade;
        proxy_set_header Host $http_host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_pass_request_headers on;
        {{ if index $container.Env "PROXY_TIMEOUT" }}
        proxy_read_timeout {{ index $container.Env "PROXY_TIMEOUT" }};
        {{ end }}
    }
    {{ end }}
}
{{ end }}